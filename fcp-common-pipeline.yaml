parameters:
  - name: appFrameworkType
    type: string
    default: nodejs
  - name: Type
    type: string
    default: kubernetes # kubernetes, npm, functions, nuget etc.
  - name: npmLegacyPeerDeps
    type: boolean
    default: false
  - name: dockerFilePath
    type: string
    default: "Dockerfile"

resources:
  repositories:
    - repository: FcpPipelineCommon
      name: DEFRA/fcp-pipeline-common
      endpoint: DEFRA-ADP
      type: github

variables:
  - group: fcp-pipeline-common-variables
  - group: fcp-pipeline-common-secrets
  - name: appName
    value: $[replace(variables['Build.Repository.Name'], 'DEFRA/', '')]
  - name: isPackage
    value: ${{ or(eq(parameters.type, 'npm'), eq(parameters.type, 'nuget')) }}
  - name: isMainBranch
    value: ${{eq(variables['Build.SourceBranch'], 'refs/heads/main')}}

stages:
  - stage: Build
    displayName: "Build"
    jobs:
      - job: AppVersionExtraction
        displayName: "Build Application"

        steps:
          - checkout: self
          - checkout: FcpPipelineCommon

          - script: |
              echo "Primary repository: $BUILD_REPOSITORY_NAME"
              echo -e "\033[0;33mBranch: $(Build.SourceBranchName)\033[0m"
              echo "Commit message: $BUILD_SOURCEVERSIONMESSAGE"
            displayName: "Build and Workspace Info"

          - script: |
              # Extract PR number from commit message (same as Jenkins)
              PR_NUMBER=$(echo "$BUILD_SOURCEVERSIONMESSAGE" | sed -n 's/.*(#\([0-9]\+\)).*/\1/p')
              echo "##vso[task.setvariable variable=prNumber;isOutput=true]$PR_NUMBER"
              echo "PR Number: ${PR_NUMBER:-'(none)'}"
            displayName: "Extract PR Number"
            name: ExtractPRNumber

          - template: /ado-pipeline/build/helpers/app-version.yaml
            parameters:
              appFrameworkType: ${{ parameters.appFrameworkType }}

          - template: /ado-pipeline/build/build-${{ parameters.appFrameworkType }}.yaml
            parameters:
              npmLegacyPeerDeps: ${{ parameters.npmLegacyPeerDeps }}

  - stage: Promote
    displayName: "Promote"
    dependsOn: Build
    variables:
      - template: variables.yaml
    jobs:
      - job: TempTestIsPr
        displayName: "TEMP - Test isPr Variable"
        steps:
          - script: |
              echo "Testing isPr Variable"
              echo "isPr value: $(isPr)"
              echo "prNumber value: $(prNumber)"

              if [ "$(isPr)" = "True" ]; then
                echo "TRUE - this is a PR build"
              elif [ "$(isPr)" = "False" ]; then
                echo "FALSE - this is not a PR build"
              else
                echo "isPr has unexpected value: '$(isPr)'"
              fi
            displayName: "Test isPr Variable"

      - job: SnyckScanApplication
        displayName: Snyk Application Scan
        steps:
          - checkout: self
          - checkout: FcpPipelineCommon
          - template: /ado-pipeline/promote/snyk-scan-application.yaml
            parameters:
              appFrameworkType: ${{ parameters.appFrameworkType }}

      - job: SonarCloud
        displayName: SonarCloud Analysis
        steps:
          - checkout: self
          - checkout: FcpPipelineCommon
          - template: /ado-pipeline/promote/sonar-cloud.yaml
            parameters:
              appFrameworkType: ${{ parameters.appFrameworkType }}

      - job: HelmTemplate
        displayName: "Build Helm Template"
        steps:
          - checkout: self
          - checkout: FcpPipelineCommon
          - template: /ado-pipeline/promote/build-helm.yaml
            parameters:
              subscription: $(sharedSubscription)
              acrName: $(sharedAcr)

      - ${{ if ne(variables['isPackage'], true) }}:
          - job: DockerBuild
            displayName: "Docker Build"
            steps:
              - checkout: self
              - checkout: FcpPipelineCommon
              - template: /ado-pipeline/promote/docker-build.yaml
                parameters:
                  dockerFilePath: ${{ parameters.dockerFilePath }}
                  subscription: $(sharedSubscription)
                  acrName: $(sharedAcr)

  - ${{ if eq(variables['isPackage'], true) }}:
      - stage: PackageDeployment
        condition: succeeded()
        dependsOn:
          - Build
        displayName: Package Deployment
        variables:
          - template: variables.yaml

        jobs:
          - job: Deploy
            displayName: Deploy
            condition: succeeded()
            steps:
              - checkout: self
              - checkout: FcpPipelineCommon
              - template: /ado-pipeline/packageDeploy/deploy-${{ parameters.type }}.yaml
