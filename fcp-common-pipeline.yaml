parameters:
  - name: appFrameworkType
    type: string
    default: "nodejs"

resources:
  repositories:
    - repository: FcpPipelineCommon
      name: DEFRA/fcp-pipeline-common
      endpoint: DEFRA-ADP
      type: github

variables:
  appName: $[replace(variables['Build.Repository.Name'], 'DEFRA/', '')]

stages:
  - stage: Build
    displayName: "Build Stage"
    variables:
      - template: variables.yml

    jobs:
      - job: buildJob
        displayName: "Build Application"

        steps:
          - checkout: self
          - checkout: FcpPipelineCommon

          - script: |
              echo APP_NAME=$(appName)
              ls -la
              env | grep -i "BUILD_REPOSITORY_NAME"
              echo -e "\033[0;33mBranch: $(Build.SourceBranchName)\033[0m"
            displayName: "Build and Workspace Info"

          - template: /ado-pipeline/init/app-version.yaml
            parameters:
              appFrameworkType: ${{ parameters.appFrameworkType }}

          - template: /ado-pipeline/build/build-${{ parameters.appFrameworkType }}.yaml

  - stage: stage
    displayName: "Stage"
    variables:
      - template: variables.yml
    jobs:
      - job: SnyckScanApplication
        displayName: "Snyk Application Scan"
        steps:
          - checkout: self
          - checkout: FcpPipelineCommon
          - template: /ado-pipeline/stage/snyk-scan-application.yaml
            parameters:
              appFrameworkType: ${{ parameters.appFrameworkType }}
      - job: SonarCloud
        displayName: "SonarCloud Analysis"
        steps:
          - checkout: self
          - checkout: FcpPipelineCommon
          - template: /ado-pipeline/stage/sonar-cloud.yaml
            parameters:
              appFrameworkType: ${{ parameters.appFrameworkType }}
      - job: HelmTemplate
        displayName: "Build Helm Template"
        steps:
          - checkout: self
          - checkout: FcpPipelineCommon
          - template: /ado-pipeline/stage/build-helm.yaml
            parameters:
              appFrameworkType: ${{ parameters.appFrameworkType }}
