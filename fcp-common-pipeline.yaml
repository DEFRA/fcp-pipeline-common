parameters:
  - name: appFrameworkType
    type: string
    default: nodejs
  - name: type
    type: string
    default: kubernetes # kubernetes, npm, functions, nuget etc.
  - name: npmLegacyPeerDeps
    type: boolean
    default: false
  - name: dockerFilePath
    type: string
    default: Dockerfile
  - name: testDockerComposeFile
    type: string
    default: docker-compose.test.yaml

  - name: prDeployment
    type: boolean
    default: false
  - name: branchDeployment
    type: boolean
    default: false
  - name: sndDeployment
    type: boolean
    default: true

resources:
  repositories:
    - repository: FcpPipelineCommon
      name: defra/fcp-pipeline-common
      endpoint: DEFRA-ADP
      type: github
      # ref: refs/heads/branch-name

variables:
  - group: fcp-pipeline-common-variables
  - group: fcp-pipeline-common-secrets
  - name: appName
    value: $[replace(variables['Build.Repository.Name'], 'DEFRA/', '')]
  - name: isPackage
    value: ${{ or(eq(parameters.type, 'npm'), eq(parameters.type, 'nuget')) }}
  - name: isMainBranch
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}
  # PR runs
  - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      - name: branchRef
        value: $[variables['System.PullRequest.SourceBranch']] # e.g. refs/heads/feature/foo
      - name: prNumber
        value: $[variables['System.PullRequest.PullRequestNumber']]
      - name: isPr
        value: true

  # Non-PR runs
  - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
      - name: branchRef
        value: $[variables['Build.SourceBranch']] # e.g. refs/heads/main
      - name: prNumber
        value: ''
      - name: isPr
        value: false

  # Derived once from branchRef
  - name: branchName
    value: $[replace(variables['branchRef'], 'refs/heads/', '')]

stages:
  - stage: Build
    displayName: 'Build'
    jobs:
      - job: InitAndBuild
        displayName: 'Build Application'

        steps:
          - checkout: self
          - checkout: FcpPipelineCommon

          - script: |
              echo "##[section]Primary repository: $BUILD_REPOSITORY_NAME"
              echo "##[section]Branch: $(branchName)"
              echo "##[section]Commit message: $BUILD_SOURCEVERSIONMESSAGE"
              echo "##[section]Is Main Branch: $(isMainBranch)"
              echo "##[section]Is Pull Request: $(isPr)"
              echo "##[section]Pull Request Number: $(prNumber)"

            displayName: 'Build and Workspace Info'

          - template: /ado-pipeline/build/helpers/app-version.yaml
            parameters:
              appFrameworkType: ${{ parameters.appFrameworkType }}

          - template: /ado-pipeline/build/build-${{ parameters.appFrameworkType }}.yaml
            parameters:
              npmLegacyPeerDeps: ${{ parameters.npmLegacyPeerDeps }}

  - stage: Promote
    displayName: 'Promote'
    dependsOn: Build
    variables:
      - template: variables.yaml
    jobs:
      - job: SnykScanApplication
        displayName: Snyk Application Scan
        steps:
          - checkout: self
          - checkout: FcpPipelineCommon
          - template: /ado-pipeline/promote/snyk-scan-application.yaml
            parameters:
              appFrameworkType: ${{ parameters.appFrameworkType }}

      - job: SonarCloud
        displayName: SonarCloud Analysis
        steps:
          - checkout: self
          - checkout: FcpPipelineCommon
          - template: /ado-pipeline/promote/sonar-cloud.yaml
            parameters:
              appFrameworkType: ${{ parameters.appFrameworkType }}

      - ${{ if ne(variables['isPackage'], true) }}:
          - job: HelmTemplate
            displayName: 'Build Helm Template'
            steps:
              - checkout: self
              - checkout: FcpPipelineCommon

              - template: /ado-pipeline/promote/build-helm.yaml
                parameters:
                  subscription: $(SubscriptionSND)
                  acrName: $(AcrSND)

              - ${{ if eq(variables['isMainBranch'], True) }}:
                  - template: /ado-pipeline/promote/build-helm.yaml
                    parameters:
                      subscription: $(SubscriptionDEV)
                      acrName: $(AcrDEV)

                  - template: /ado-pipeline/promote/build-helm.yaml
                    parameters:
                      subscription: $(SubscriptionPRE)
                      acrName: $(AcrPRE)

                  - template: /ado-pipeline/promote/build-helm.yaml
                    parameters:
                      subscription: $(SubscriptionPRD)
                      acrName: $(AcrPRD)

          - job: DockerBuild
            displayName: 'Docker Build'
            steps:
              - checkout: self
              - checkout: FcpPipelineCommon

              - template: /ado-pipeline/promote/docker-build.yaml
                parameters:
                  dockerFilePath: ${{ parameters.dockerFilePath }}
                  subscription: $(SubscriptionSND)
                  acrName: $(AcrSND)

              - ${{ if eq(variables['isMainBranch'], True) }}:
                  - template: /ado-pipeline/promote/docker-build.yaml
                    parameters:
                      dockerFilePath: ${{ parameters.dockerFilePath }}
                      subscription: $(SubscriptionDEV)
                      acrName: $(AcrDEV)

                  - template: /ado-pipeline/promote/docker-build.yaml
                    parameters:
                      dockerFilePath: ${{ parameters.dockerFilePath }}
                      subscription: $(SubscriptionPRE)
                      acrName: $(AcrPRE)

                  - template: /ado-pipeline/promote/docker-build.yaml
                    parameters:
                      dockerFilePath: ${{ parameters.dockerFilePath }}
                      subscription: $(SubscriptionPRD)
                      acrName: $(AcrPRD)

          - job: TestsDockerCompose
            displayName: Tests With Docker Compose
            dependsOn: DockerBuild
            condition: succeeded()
            steps:
              - checkout: self
              - checkout: FcpPipelineCommon
              - template: /ado-pipeline/promote/tests-docker-compose.yaml
                parameters:
                  testDockerComposeFile: ${{ parameters.testDockerComposeFile }}
                  subscription: $(sharedSubscription)

  - ${{ if eq(variables['isPackage'], true) }}:
      - stage: PackageDeployment
        condition: succeeded()
        dependsOn:
          - Build
        displayName: Package Deployment
        variables:
          - template: variables.yaml

        jobs:
          - job: Deploy
            displayName: Deploy
            condition: succeeded()
            steps:
              - checkout: self
              - checkout: FcpPipelineCommon
              - template: /ado-pipeline/packageDeploy/deploy-${{ parameters.type }}.yaml

  - ${{ if eq(variables['isMainBranch'], False) }}:
      - ${{ if or( and(eq(variables['isPr'], True), eq(parameters.prDeployment, True)) , and(ne(variables['isPr'], True), eq(parameters.branchDeployment, True))) }}:
          - stage: BetaDeployment
            variables:
              - template: variables.yaml
              - group: fcp-pipeline-snd2-variables
            pool:
              name: DEFRA-FFC-SND2-ubuntu2204
              condition: succeeded()
            dependsOn:
              - Build
              - Promote
            displayName: Beta Deployment

            jobs:
              - job: provisioning
                displayName: Provisioning
                condition: succeeded()
                steps:
                  - checkout: self
                  - checkout: FcpPipelineCommon
                  - template: /ado-pipeline/provision/resources-provisioning.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-SND2
                      isTemporary: true
                  - template: /ado-pipeline/provision/database-check.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-SND2
                  - template: /ado-pipeline/provision/database-provisioning.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-SND2
                      isTemporary: true
                      databaseName: $(DbCheck.databaseName)
                      identityName: $(resourceProvisioning.identityName)
                  - template: /ado-pipeline/provision/database-migration.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-SND2
                      isTemporary: true
                      databaseName: $(DbCheck.databaseName)
                  - template: /ado-pipeline/provision/database-privileges.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-SND2
                      isTemporary: true
                      databaseName: $(DbCheck.databaseName)
                      identityName: $(resourceProvisioning.identityName)

              - deployment: TempDeploy
                variables:
                  - name: identityName
                    value: $[ dependencies.provisioning.outputs['resourceProvisioning.identityName'] ]
                  - name: identityClientId
                    value: $[ dependencies.provisioning.outputs['resourceProvisioning.identityClientId'] ]
                  - name: identityResourceId
                    value: $[ dependencies.provisioning.outputs['resourceProvisioning.identityResourceId'] ]
                  - name: databaseName
                    value: $[ dependencies.provisioning.outputs['DbCheck.databaseName'] ]
                displayName: Deploy
                environment: SND2-TEMP
                dependsOn: provisioning
                condition: succeeded()
                workspace:
                  clean: all
                strategy:
                  runOnce:
                    deploy:
                      steps:
                        - checkout: self
                        - checkout: FcpPipelineCommon
                        - template: /ado-pipeline/Deploy/deploy.yaml
                          parameters:
                            env: pr
                            subscription: $(subscriptionPreFix)-SND2
                            acr: $(AcrSND)
                            isTemporary: true

  - ${{ else }}:
      - ${{ if eq(parameters.sndDeployment, true) }}:
          - stage: DeploymentSND
            variables:
              - template: variables.yaml
              - group: fcp-pipeline-snd2-variables
            pool:
              name: DEFRA-FFC-SND2-ubuntu2204
              condition: succeeded()
            dependsOn:
              - Build
              - Promote
            displayName: SND Deployment

            jobs:
              - job: provisioningSND
                displayName: Provisioning SND
                condition: succeeded()
                steps:
                  - checkout: self
                  - checkout: FcpPipelineCommon
                  - template: /ado-pipeline/provision/resources-provisioning.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-SND2
                      isTemporary: false
                  - template: /ado-pipeline/provision/database-check.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-SND2
                  - template: /ado-pipeline/provision/database-provisioning.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-SND2
                      isTemporary: false
                      databaseName: $(DbCheck.databaseName)
                      identityName: $(resourceProvisioning.identityName)
                  - template: /ado-pipeline/provision/database-migration.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-SND2
                      isTemporary: false
                      databaseName: $(DbCheck.databaseName)
                  - template: /ado-pipeline/provision/database-privileges.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-SND2
                      isTemporary: false
                      databaseName: $(DbCheck.databaseName)
                      identityName: $(resourceProvisioning.identityName)

              - deployment: DeploySND
                variables:
                  - name: identityName
                    value: $[ dependencies.provisioningSND.outputs['resourceProvisioning.identityName'] ]
                  - name: identityClientId
                    value: $[ dependencies.provisioningSND.outputs['resourceProvisioning.identityClientId'] ]
                  - name: identityResourceId
                    value: $[ dependencies.provisioningSND.outputs['resourceProvisioning.identityResourceId'] ]
                  - name: databaseName
                    value: $[ dependencies.provisioningSND.outputs['DbCheck.databaseName'] ]
                displayName: Deploy SND
                environment: SND2
                dependsOn: provisioningSND
                condition: succeeded()
                workspace:
                  clean: all
                strategy:
                  runOnce:
                    deploy:
                      steps:
                        - checkout: self
                        - checkout: FcpPipelineCommon
                        - template: /ado-pipeline/Deploy/deploy.yaml
                          parameters:
                            env: snd
                            subscription: $(subscriptionPreFix)-SND2
                            acr: $(AcrSND)
                            isTemporary: false
          - stage: DeploymentDEV
            variables:
              - template: variables.yaml
              - group: fcp-pipeline-dev1-variables
            pool:
              name: 'DEFRA-FFC-DEV1-ubuntu2004'
              condition: succeeded()
            dependsOn:
              - Build
              - Promote
              - DeploymentSND
            displayName: DEV Deployment

            jobs:
              - job: provisioningDEV
                displayName: Provisioning DEV
                condition: succeeded()
                steps:
                  - checkout: self
                  - checkout: FcpPipelineCommon
                  - template: /ado-pipeline/provision/resources-provisioning.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-DEV1
                      isTemporary: false
                  - template: /ado-pipeline/provision/database-check.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-DEV1
                  - template: /ado-pipeline/provision/database-provisioning.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-DEV1
                      isTemporary: false
                      databaseName: $(DbCheck.databaseName)
                      identityName: $(resourceProvisioning.identityName)
                  - template: /ado-pipeline/provision/database-migration.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-DEV1
                      isTemporary: false
                      databaseName: $(DbCheck.databaseName)
                  - template: /ado-pipeline/provision/database-privileges.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-DEV1
                      isTemporary: false
                      databaseName: $(DbCheck.databaseName)
                      identityName: $(resourceProvisioning.identityName)

              - deployment: DeployDEV
                variables:
                  - name: identityName
                    value: $[ dependencies.provisioningDEV.outputs['resourceProvisioning.identityName'] ]
                  - name: identityClientId
                    value: $[ dependencies.provisioningDEV.outputs['resourceProvisioning.identityClientId'] ]
                  - name: identityResourceId
                    value: $[ dependencies.provisioningDEV.outputs['resourceProvisioning.identityResourceId'] ]
                  - name: databaseName
                    value: $[ dependencies.provisioningDEV.outputs['DbCheck.databaseName'] ]
                displayName: Deploy DEV
                environment: DEV
                dependsOn: provisioningDEV
                condition: succeeded()
                workspace:
                  clean: all
                strategy:
                  runOnce:
                    deploy:
                      steps:
                        - checkout: self
                        - checkout: FcpPipelineCommon
                        - template: /ado-pipeline/Deploy/deploy.yaml
                          parameters:
                            env: dev
                            subscription: $(subscriptionPreFix)-DEV1
                            acr: $(AcrDEV)
                            isTemporary: false
          - stage: DeploymentTEST
            variables:
              - template: variables.yaml
              - group: fcp-pipeline-test-variables
            pool:
              name: 'DEFRA-FFC-DEV1-ubuntu2004'
              condition: succeeded()
            dependsOn:
              - Build
              - Promote
              - DeploymentDEV
            displayName: TEST Deployment

            jobs:
              - job: provisioningTEST
                displayName: Provisioning TEST
                condition: succeeded()
                steps:
                  - checkout: self
                  - checkout: FcpPipelineCommon
                  - template: /ado-pipeline/provision/resources-provisioning.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-DEV1
                      isTemporary: false
                  - template: /ado-pipeline/provision/database-check.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-DEV1
                  - template: /ado-pipeline/provision/database-provisioning.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-DEV1
                      isTemporary: false
                      databaseName: $(DbCheck.databaseName)
                      identityName: $(resourceProvisioning.identityName)
                  - template: /ado-pipeline/provision/database-migration.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-DEV1
                      isTemporary: false
                      databaseName: $(DbCheck.databaseName)
                  - template: /ado-pipeline/provision/database-privileges.yaml
                    parameters:
                      subscription: $(subscriptionPreFix)-DEV1
                      isTemporary: false
                      databaseName: $(DbCheck.databaseName)
                      identityName: $(resourceProvisioning.identityName)

              - deployment: DeployTEST
                variables:
                  - name: identityName
                    value: $[ dependencies.provisioningTEST.outputs['resourceProvisioning.identityName'] ]
                  - name: identityClientId
                    value: $[ dependencies.provisioningTEST.outputs['resourceProvisioning.identityClientId'] ]
                  - name: identityResourceId
                    value: $[ dependencies.provisioningTEST.outputs['resourceProvisioning.identityResourceId'] ]
                  - name: databaseName
                    value: $[ dependencies.provisioningTEST.outputs['DbCheck.databaseName'] ]
                displayName: Deploy TEST
                environment: TEST
                dependsOn: provisioningTEST
                condition: succeeded()
                workspace:
                  clean: all
                strategy:
                  runOnce:
                    deploy:
                      steps:
                        - checkout: self
                        - checkout: FcpPipelineCommon
                        - template: /ado-pipeline/Deploy/deploy.yaml
                          parameters:
                            env: test
                            subscription: $(subscriptionPreFix)-DEV1
                            acr: $(AcrDEV)
                            isTemporary: false
