parameters:
  - name: subscription
    type: string
  - name: isTemporary
    type: boolean
    default: false
steps:
  - task: AzureCLI@2
    displayName: 'Resource Provisioning'
    name: resourceProvisioning
    inputs:
      azureSubscription: ${{ parameters.subscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        echo "##[debug]isTemporary is:  ${{ parameters.isTemporary }}"

        source ./fcp-pipeline-common/common/shared_functions.sh

        federation=$(get_federation_name "$(appName)" "$(altEnvironment)" "$(releaseVersion)")
        echo "##[debug]The federation name is $federation"

        namespace=$(get_namespace_name "$(isMainBranch)" "$(appName)" "$(releaseVersion)" "$(altEnvironment)")
        echo "##[debug]The namespace is $namespace"
       
        # Setting the parameters for the Bicep deployment

        location="northeurope"
        subject=system:serviceaccount:"$namespace":$(appName)
        echo "##[debug]The federation subject is $subject"

        PROVISIONING_YAML_FILE="$(appName)/provision.azure.yaml"

        echo "##[debug]Generation the povisioning object: get_provisioning_object $PROVISIONING_YAML_FILE $(appName) $(prOrBranchNo) ${{ parameters.isTemporary }}"
        PROVISIONING_OBJECT=$(get_provisioning_object "$PROVISIONING_YAML_FILE" "$(appName)" "$(prOrBranchNo)" "${{ parameters.isTemporary }}")

        echo "##[debug]The Provisioning Object is $PROVISIONING_OBJECT"

        echo "##[debug]Executing what-if operation for resources provisioning..."

        az deployment group what-if \
          --resource-group $(resourceGroup) \
          --template-file ./fcp-pipeline-common/common/resources.bicep \
          --parameters targetEnvironment="$(targetEnvironment)" \
                          subscriptionSpoke="$(subscriptionSpoke)" \
                          altEnvironment="$(altEnvironment)" \
                          location="$location" \
                          issuer="$(aksOidcIssuerIssuerUrl)" \
                          subject="$subject" \
                          federationName="$federation" \
                          environmentDescription="$(environmentDescription)" \
                          resourcesObject="$PROVISIONING_OBJECT"

        echo "##[debug]Executing the 'az deployment group create' ..."

        DEPLOYMENT_RESULT=$(az deployment group create \
          --resource-group $(resourceGroup) \
          --template-file ./fcp-pipeline-common/common/resources.bicep \
          --parameters targetEnvironment="$(targetEnvironment)" \
                          subscriptionSpoke="$(subscriptionSpoke)" \
                          altEnvironment="$(altEnvironment)" \
                          location="$location" \
                          issuer="$(aksOidcIssuerIssuerUrl)" \
                          subject="$subject" \
                          federationName="$federation" \
                          environmentDescription="$(environmentDescription)" \
                          resourcesObject="$PROVISIONING_OBJECT" \
          --output json)

        PROVISIONING_STATE=$(echo $DEPLOYMENT_RESULT |jq -r '.properties.provisioningState')

        if [[ "$PROVISIONING_STATE" == "Succeeded" ]]; then
            echo "##[debug]ProvisioningState : $PROVISIONING_STATE"
        else
            echo "##[error]❌ Something went wrong with the provisioning. ProvisioningState: $PROVISIONING_STATE"
            echo "##[debug] $DEPLOYMENT_RESULT"
            exit 1
        fi

        outputs=$(echo "$DEPLOYMENT_RESULT" | jq -r '.properties.outputs')

        # Creating role assignments
        echo "##[debug]Creating role assignments..."

        scripts=$(echo "$outputs" | jq -r '.queueRoleCreates.value + .topicRoleCreates.value | flatten | .[]')

        while IFS= read -r cmd; do
          echo "Running: $cmd"
          eval "$cmd"
          if [ $? -ne 0 ]; then
            echo "##[error]❌ Command failed: $cmd"
            exit 1
          fi
        done <<< "$scripts"

        # Extract outputs using jq
        echo "##[debug]Extracting outputs..."

        identityClientId=$(echo "$outputs" | jq -r '.identityClientId.value')
        identityResourceId=$(echo "$outputs" | jq -r '.identityResourceId.value')
        identityName=$(echo "$outputs" | jq -r '.identityName.value')

        echo "##[debug]Identity Name: $identityName"
        echo "##[debug]Identity Client ID: $identityClientId"
        echo "##[debug]Identity Resource ID: $identityResourceId"
       
        echo "##vso[task.setvariable variable=identityName;isOutput=true]$identityName"
        echo "##vso[task.setvariable variable=identityClientId;isOutput=true]$identityClientId"
        echo "##vso[task.setvariable variable=identityResourceId;isOutput=true]$identityResourceId"
