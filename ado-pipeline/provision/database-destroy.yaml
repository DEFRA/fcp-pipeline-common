parameters:
  - name: subscription
    type: string
  - name: prOrBranchNo
    type: string
  - name: databaseName
    type: string
  - name: appName
    type: string
steps:
  - task: AzureCLI@2
    displayName: Database decommissioning
    condition: succeeded()
    inputs:
      azureSubscription: ${{ parameters.subscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        echo "##[debug]Creating the database"
        source ./fcp-pipeline-common/common/shared_functions.sh

        DB_FULL_NAME=${{ parameters.databaseName }}
        DATABASE_HOST=$(targetEnvironment)$(sqlflexiServerName).postgres.database.azure.com
        DATABASE_ADMIN=$(sqlpostgresflexiAADGroupName)

        echo "##[debug]database name: $DB_FULL_NAME"

        # Check if the database is exist!
        IS_DB_EXIST=$(run_db_command "$DATABASE_ADMIN" "$DATABASE_HOST" "postgres" "\l" | cut -d \| -f 1 | grep "$DB_FULL_NAME")

        if [[ $IS_DB_EXIST ]]; then
          echo "##[debug]The database $DB_FULL_NAME is exists"
          SCHEMA_NAME=$(get_schema_name "${{ parameters.appName }}" "True" "${{ parameters.prOrBranchNo }}")
          echo "##[debug]Deleting the Schema: $SCHEMA_NAME in the Database: $DB_FULL_NAME in $DATABASE_HOST"

          deleteCommand="DROP SCHEMA IF EXISTS \"${SCHEMA_NAME}\" CASCADE"

          RESULT=$(run_db_command "$DATABASE_ADMIN" "$DATABASE_HOST" "$DB_FULL_NAME" "$deleteCommand")
          echo "##[debug]RESULT"

        else
          echo "##[warning]The database $DB_FULL_NAME is not exists!!!"
        fi
